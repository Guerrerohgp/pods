{"version":3,"file":null,"sources":["/home/pglewis/Projects/varying-vagrant-vagrants/www/pods-dev/wp-content/plugins/pods/ui/fields/file-upload/src/models/file-upload-model.js","/home/pglewis/Projects/varying-vagrant-vagrants/www/pods-dev/wp-content/plugins/pods/ui/fields/file-upload/src/views/file-upload-list.js","/home/pglewis/Projects/varying-vagrant-vagrants/www/pods-dev/wp-content/plugins/pods/ui/fields/file-upload/src/views/file-upload-form.js","/home/pglewis/Projects/varying-vagrant-vagrants/www/pods-dev/wp-content/plugins/pods/ui/fields/file-upload/src/uploaders/pods-file-uploader.js","/home/pglewis/Projects/varying-vagrant-vagrants/www/pods-dev/wp-content/plugins/pods/ui/fields/file-upload/src/views/file-upload-queue.js","/home/pglewis/Projects/varying-vagrant-vagrants/www/pods-dev/wp-content/plugins/pods/ui/fields/file-upload/src/uploaders/plupload.js","/home/pglewis/Projects/varying-vagrant-vagrants/www/pods-dev/wp-content/plugins/pods/ui/fields/file-upload/src/uploaders/media-modal.js","/home/pglewis/Projects/varying-vagrant-vagrants/www/pods-dev/wp-content/plugins/pods/ui/fields/file-upload/src/file-upload.js","/home/pglewis/Projects/varying-vagrant-vagrants/www/pods-dev/wp-content/plugins/pods/ui/js/pods-ui-ready.js"],"sourcesContent":["/*global jQuery, _, Backbone, Mn */\n/**\n *\n */\nexport const FileUploadModel = Backbone.Model.extend( {\n\tdefaults: {\n\t\t'id'  : 0,\n\t\t'icon': '',\n\t\t'name': '',\n\t\t'link': ''\n\t}\n} );\n\n/**\n *\n */\nexport const FileUploadCollection = Backbone.Collection.extend( {\n\tmodel: FileUploadModel,\n\n\tfield_meta: {},\n\n\tinitialize: function ( models, field_meta ) {\n\t\tthis.field_meta = field_meta || {};\n\t\tthis.field_meta.field_options = this.field_meta.field_options || {};\n\n\t\t// add() will always be called once per model in the collection\n\t\tthis.listenTo( this, 'add', this.onCollectionAdd );\n\t},\n\n\tonCollectionAdd: function ( model, collection, options ) {\n\t\tthis.truncateToFileLimit( this.field_meta.field_options.file_limit );\n\t},\n\n\ttruncateToFileLimit: function ( limit ) {\n\t\tvar first_model;\n\n\t\tif ( limit != 0 && this.length > limit ) {\n\n\t\t\t// We've gone over the item limit, so destroy the top (oldest) item, LIFO-style\n\t\t\t// Note: calling destroy() directly on the model will send a REST DELETE request, this bypasses that behavior\n\t\t\tfirst_model = this.at( 0 );\n\t\t\tfirst_model.trigger( 'destroy', first_model );\n\t\t}\n\t}\n\n} );\n","/*global jQuery, _, Backbone, Mn */\n/**\n * Individual list items, representing a single file\n */\nconst $ = jQuery;\nexport const FileUploadItem = Mn.LayoutView.extend( {\n\ttagName: 'li',\n\n\tclassName: 'pods-file',\n\n\tui: {\n\t\tdrag_handle  : '.pods-file-handle',\n\t\tdownload_link: '.pods-file-download',\n\t\tremove_button: '.pods-file-remove'\n\t},\n\n\ttemplate: _.template( $( '#file-upload-item-template' ).html() ),\n\n\ttriggers: {\n\t\t'click @ui.remove_button': 'remove:file:click'\n\t},\n\n\t/**\n\t * @todo: abstract this out.  All fields need access to the field meta and individual views shouldn't have to\n\t * worry about marshalling that data around.\n\t *\n\t * The return value here is what will be made available to the template\n\t */\n\tserializeData: function () {\n\t\tvar data = this.model.toJSON();\n\n\t\tdata.attr = this.options[ 'field_attributes' ];\n\t\tdata.options = this.options[ 'field_options' ];\n\n\t\treturn data;\n\t}\n\n} );\n\n/**\n * The file list container\n */\nexport const FileUploadList = Mn.CollectionView.extend( {\n\ttagName: 'ul',\n\n\tclassName: 'pods-files pods-files-list',\n\n\tchildView: FileUploadItem,\n\n\t// @todo: abstract this out.  All fields need access to the field meta and individual views shouldn't have to\n\t// worry about marshalling that data around.\n\tinitialize: function ( options ) {\n\t\tthis.childViewOptions = options.field_meta;\n\t},\n\n\tonAttach: function () {\n\n\t\t// @todo\n\t\t// http://stackoverflow.com/questions/1735372/jquery-sortable-list-scroll-bar-jumps-up-when-sorting/4187833#4187833\n\n\t\t// @todo: turn this into a list view behavior\n\n\t\tif ( 1 != this.options[ 'field_meta' ][ 'field_options' ][ 'file_limit' ] ) {\n\t\t\t// init sortable\n\t\t\tthis.$el.sortable( {\n\t\t\t\tcontainment      : 'parent',\n\t\t\t\taxis             : 'y',\n\t\t\t\tscrollSensitivity: 40,\n\t\t\t\ttolerance        : 'pointer',\n\t\t\t\topacity          : 0.6\n\t\t\t} );\n\t\t}\n\t}\n\n} );\n\n","/*global jQuery, _, Backbone, Mn */\nconst $ = jQuery;\n\nexport const FileUploadForm = Mn.LayoutView.extend( {\n\n\ttagName: 'div',\n\n\tui: {\n\t\tadd_button: '.pods-file-add'\n\t},\n\n\ttemplate: _.template( $( '#file-upload-form-template' ).html() ),\n\n\ttriggers: {\n\t\t'click @ui.add_button': 'add:file:click'\n\t},\n\n\t/**\n\t * @todo: abstract this out.  All fields need access to the field meta and individual views shouldn't have to\n\t * worry about marshalling that data around.\n\t *\n\t * The return value here is what will be made available to the template\n\t */\n\tserializeData: function () {\n\t\tvar data = {};\n\n\t\tdata.attributes = this.options.field_meta[ 'field_attributes' ];\n\t\tdata.options = this.options.field_meta[ 'field_options' ];\n\n\t\treturn data;\n\t}\n\n} );\n","/*global jQuery, _, Backbone, Mn */\n/**\n *\n * @param {Object} options\n *\n * @param {Object} options.browse_button   Existing and attached DOM node\n * @param {Object} options.ui_region       Marionette.Region object\n * @param {Object} options.field_options\n *\n * @param {string} options.field_options.file_modal_title\n * @param {string} options.field_options.file_modal_add_button\n * @param {string} options.field_options.file_limit\n * @param {string} options.field_options.limit_extensions\n * @param {string} options.field_options.limit_types\n * @param {string} options.field_options.file_attachment_tab\n *\n * @param {Object} options.field_options.plupload_init\n * @param {Object} options.field_options.plupload_init.browse_button\n *\n * @class\n */\nexport const PodsFileUploader = Mn.Object.extend( {\n\n\tconstructor: function ( options ) {\n\t\t// Magically set the object properties we need, they'll just \"be there\" for the concrete instance\n\t\tthis.browse_button = options.browse_button;\n\t\tthis.ui_region = options.ui_region;\n\t\tthis.field_options = options.field_options;\n\n\t\tMn.Object.call( this, options );\n\t}\n\n} );\n\n","/*global jQuery, _, Backbone, Mn */\nconst $ = jQuery;\n\nexport const FileUploadQueueModel = Backbone.Model.extend( {\n\tdefaults: {\n\t\tid       : 0,\n\t\tfilename : '',\n\t\tprogress : 0,\n\t\terror_msg: ''\n\t}\n} );\n\n/**\n *\n */\nexport const FileUploadQueueItem = Mn.LayoutView.extend( {\n\tmodel: FileUploadQueueModel,\n\n\ttagName: 'li',\n\n\ttemplate: _.template( $( '#file-upload-queue-template' ).html() ),\n\n\tattributes: function () {\n\t\treturn {\n\t\t\tclass: 'pods-file',\n\t\t\tid   : this.model.get( 'id' )\n\t\t};\n\t},\n\n\tmodelEvents: {\n\t\t'change': 'onModelChanged'\n\t},\n\n\tonModelChanged: function () {\n\t\tthis.render();\n\t}\n\n} );\n\n/**\n *\n */\nexport const FileUploadQueue = Mn.CollectionView.extend( {\n\ttagName: 'ul',\n\n\tclassName: 'pods-files pods-files-queue',\n\n\tchildView: FileUploadQueueItem\n} );\n","/*global jQuery, _, Backbone, Mn, wp, plupload */\nconst $ = jQuery;\n\nimport { PodsFileUploader } from './pods-file-uploader';\nimport { FileUploadQueueModel, FileUploadQueue } from '../views/file-upload-queue';\n\nexport const Plupload = PodsFileUploader.extend( {\n\tplupload: {},\n\n\tinitialize: function () {\n\n\t\t// Set the browse button argument for plupload... it's required\n\t\tthis.field_options.plupload_init.browse_button = this.browse_button;\n\n\t\tthis.plupload = new plupload.Uploader( this.field_options.plupload_init );\n\t\tthis.plupload.init();\n\n\t\t// Setup all callbacks: ( event_name, callback, context )\n\t\tthis.plupload.bind( 'FilesAdded', this.onFilesAdded, this );\n\t\tthis.plupload.bind( 'UploadProgress', this.onUploadProgress, this );\n\t\tthis.plupload.bind( 'FileUploaded', this.onFileUploaded, this );\n\t},\n\n\t/**\n\t * Fired after files have been selected from the dialog\n\t *\n\t * @param up\n\t * @param files\n\t */\n\tonFilesAdded: function ( up, files ) {\n\t\tvar model,\n\t\t\tcollection,\n\t\t\tview;\n\n\t\t// Assemble the collection data for the file queue\n\t\tcollection = new Backbone.Collection();\n\t\t$.each( files, function ( index, file ) {\n\t\t\tmodel = new FileUploadQueueModel( {\n\t\t\t\tid      : file.id,\n\t\t\t\tfilename: file.name\n\t\t\t} );\n\n\t\t\tcollection.add( model );\n\t\t} );\n\n\t\t// Create a new view based on the collection\n\t\tview = new FileUploadQueue( { collection: collection } );\n\t\tview.render();  // Generate the HTML, not attached to the DOM yet\n\n\t\t// Reset the region in case any error messages are hanging around from a previous upload\n\t\t// and show the new file upload queue\n\t\tthis.ui_region.reset();\n\t\tthis.ui_region.show( view );\n\n\t\t// Stash references\n\t\tthis.queue_collection = collection;\n\n\t\tup.refresh();\n\t\tup.start();\n\t},\n\n\t/**\n\t *\n\t * @param up\n\t * @param file\n\t */\n\tonUploadProgress: function ( up, file ) {\n\t\tvar model = this.queue_collection.get( file.id );\n\t\tmodel.set( { progress: file.percent } );\n\t},\n\n\t/**\n\t *\n\t * @param up\n\t * @param file\n\t * @param resp\n\t */\n\tonFileUploaded: function ( up, file, resp ) {\n\t\tvar response = resp.response,\n\t\t\tnew_file = [],\n\t\t\tmodel = this.queue_collection.get( file.id );\n\n\t\t// Error condition 1\n\t\tif ( \"Error: \" == resp.response.substr( 0, 7 ) ) {\n\t\t\tresponse = response.substr( 7 );\n\t\t\tif ( window.console ) {\n\t\t\t\tconsole.log( response );\n\t\t\t}\n\n\t\t\tmodel.set( {\n\t\t\t\tprogress : 0,\n\t\t\t\terror_msg: response\n\t\t\t} );\n\t\t}\n\t\t// Error condition 2\n\t\telse if ( \"<e>\" == resp.response.substr( 0, 3 ) ) {\n\t\t\tresponse = $( response ).text(); // Strip tags, text only\n\t\t\tif ( window.console ) {\n\t\t\t\tconsole.log( response );\n\t\t\t}\n\n\t\t\tmodel.set( {\n\t\t\t\tprogress : 0,\n\t\t\t\terror_msg: response\n\t\t\t} );\n\t\t}\n\t\telse {\n\t\t\tvar json = response.match( /{.*}$/ );\n\n\t\t\tif ( null !== json && 0 < json.length ) {\n\t\t\t\tjson = $.parseJSON( json[ 0 ] );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tjson = {};\n\t\t\t}\n\n\t\t\tif ( 'object' != typeof json || $.isEmptyObject( json ) ) {\n\t\t\t\tif ( window.console ) {\n\t\t\t\t\tconsole.log( response );\n\t\t\t\t}\n\t\t\t\tif ( window.console ) {\n\t\t\t\t\tconsole.log( json );\n\t\t\t\t}\n\n\t\t\t\tmodel.set( {\n\t\t\t\t\tprogress : 0,\n\t\t\t\t\terror_msg: 'There was an issue with the file upload, please try again.'\n\t\t\t\t} );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnew_file = {\n\t\t\t\tid  : json.ID,\n\t\t\t\ticon: json.thumbnail,\n\t\t\t\tname: json.post_title,\n\t\t\t\tlink: json.link\n\t\t\t};\n\n\t\t\t// Remove the file from the upload queue model and trigger an event for the hosting container\n\t\t\tmodel.trigger( 'destroy', model );\n\t\t\tthis.trigger( 'added:files', new_file );\n\t\t}\n\t},\n\n\t// This should never be called as plupload intercepts the button click event itself\n\tinvoke: function () {\n\t\treturn;\n\t}\n\n} );\n\n","/*global jQuery, _, Backbone, Mn, wp */\nimport { PodsFileUploader } from './pods-file-uploader';\n\nconst $ = jQuery;\n\nexport const MediaModal = PodsFileUploader.extend( {\n\tmedia_object: {},\n\n\tinvoke: function () {\n\n\t\tif ( wp.Uploader.defaults.filters.mime_types === undefined ) {\n\t\t\twp.Uploader.defaults.filters.mime_types = [ { title: 'Allowed Files', extensions: '*' } ];\n\t\t}\n\n\t\tvar default_ext = wp.Uploader.defaults.filters.mime_types[ 0 ].extensions;\n\n\t\twp.Uploader.defaults.filters.mime_types[ 0 ].extensions = this.field_options.limit_extensions;\n\n\t\t// set our settings\n\t\tthis.media_object = wp.media( {\n\t\t\ttitle   : this.field_options.file_modal_title,\n\t\t\tmultiple: ( 1 != this.field_options.file_limit ),\n\t\t\tlibrary : {\n\t\t\t\ttype: this.field_options.limit_types\n\t\t\t},\n\t\t\t// Customize the submit button.\n\t\t\tbutton  : {\n\t\t\t\t// Set the text of the button.\n\t\t\t\ttext: this.field_options.file_modal_add_button\n\t\t\t}\n\t\t} );\n\n\t\t// One-shot callback ( event, callback, context )\n\t\tthis.media_object.once( 'select', this.onMediaSelect, this );\n\n\t\t// open the frame\n\t\tthis.media_object.open();\n\t\tthis.media_object.content.mode( this.field_options.file_attachment_tab );\n\n\t\t// Reset the allowed file extensions\n\t\twp.Uploader.defaults.filters.mime_types[ 0 ].extensions = default_ext;\n\t},\n\n\tonMediaSelect: function () {\n\t\tvar new_files = [];\n\t\tvar selection = this.media_object.state().get( 'selection' );\n\n\t\tif ( !selection ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// loop through the selected files\n\t\tselection.each( function ( attachment ) {\n\t\t\tvar attachment_thumbnail;\n\t\t\tvar sizes = attachment.attributes.sizes;\n\n\t\t\t// by default use the generic icon\n\t\t\tattachment_thumbnail = attachment.attributes.icon;\n\n\t\t\t// only thumbnails have sizes which is what we're on the hunt for\n\t\t\tif ( sizes !== undefined ) {\n\t\t\t\t// Get thumbnail if it exists\n\t\t\t\tif ( sizes.thumbnail !== undefined && sizes.thumbnail.url !== undefined ) {\n\t\t\t\t\tattachment_thumbnail = sizes.thumbnail.url;\n\t\t\t\t}// If thumbnail doesn't exist, get full because this is a small image\n\t\t\t\telse if ( sizes.full !== undefined && sizes.full.url !== undefined ) {\n\t\t\t\t\tattachment_thumbnail = sizes.full.url;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnew_files.push( {\n\t\t\t\tid  : attachment.attributes.id,\n\t\t\t\ticon: attachment_thumbnail,\n\t\t\t\tname: attachment.attributes.title,\n\t\t\t\tlink: attachment.attributes.url\n\t\t\t} );\n\t\t} );\n\n\t\t// Fire an event with an array of models to be added\n\t\tthis.trigger( 'added:files', new_files );\n\t}\n\n} );\n","/*global jQuery, _, Backbone, Mn */\nconst $ = jQuery;\n\nimport { FileUploadCollection, FileUploadModel } from './models/file-upload-model';\nimport { FileUploadList } from './views/file-upload-list';\nimport { FileUploadForm } from './views/file-upload-form';\n\nimport { Plupload } from './uploaders/plupload';\nimport { MediaModal } from './uploaders/media-modal';\n\n// @todo: last vestiges of knowledge about any specific uploaders?\nconst PLUPLOAD_UPLOADER = 'plupload';\n\nexport const FileUpload = Mn.LayoutView.extend( {\n\ttemplate: _.template( $( '#file-upload-layout-template' ).html() ),\n\n\tregions: {\n\t\tlist     : '.pods-ui-file-list',\n\t\tui_region: '.pods-ui-region', // \"Utility\" container for uploaders to use\n\t\tform     : '.pods-ui-form'\n\t},\n\n\tfield_meta: {}, // @todo: things to be yanked when we abstract our field data needs\n\n\tuploader: {},\n\n\tinitialize: function () {\n\t\t// @todo: abstract this out.  All fields need access to the field meta and individual views shouldn't have to\n\t\t// worry about marshalling that data around.\n\t\tthis.field_meta = this.getOption( 'field_meta' );\n\n\t\tthis.collection = new FileUploadCollection( this.getOption( 'model_data' ), this.field_meta );\n\t\tthis.model = new FileUploadModel();\n\t},\n\n\tonRender: function () {\n\t\t// @todo: abstract this out.  All fields need access to the field meta and individual views shouldn't have to\n\t\t// worry about marshalling that data around.\n\t\tvar listView = new FileUploadList( { collection: this.collection, field_meta: this.field_meta } );\n\t\tvar formView = new FileUploadForm( { field_meta: this.field_meta } );\n\n\t\tthis.showChildView( 'list', listView );\n\t\tthis.showChildView( 'form', formView );\n\n\t\t// Setup the uploader and listen for a response event\n\t\tthis.uploader = this.createUploader();\n\t\tthis.listenTo( this.uploader, 'added:files', this.onAddedFiles );\n\t},\n\n\t/**\n\t * Fired by a remove:file:click trigger in any child view\n\t *\n\t * @param childView View that was the source of the event\n\t */\n\tonChildviewRemoveFileClick: function ( childView ) {\n\t\tthis.collection.remove( childView.model );\n\t},\n\n\t/**\n\t * Fired by a add:file:click trigger in any child view\n\t *\n\t * plupload fields should never generate this event as it places a shim over our button and handles the event\n\t * internally\n\t */\n\tonChildviewAddFileClick: function () {\n\t\t// Invoke the uploader\n\t\tthis.uploader.invoke();\n\t},\n\n\t/**\n\t * Concrete uploader implementations simply need to: this.trigger( 'added:files', new_files )\n\t *\n\t * @param {Object[]} data An array of model objects to be added\n\t */\n\tonAddedFiles: function ( data ) {\n\t\tthis.collection.add( data );\n\t},\n\n\tcreateUploader: function () {\n\t\tvar options = this.field_meta[ 'field_options' ];\n\t\tvar Uploader;\n\n\t\t// Determine which uploader object to use\n\t\t// @todo: last vestiges of knowledge about any specific uploaders?\n\t\tif ( PLUPLOAD_UPLOADER == options[ 'file_uploader' ] ) {\n\t\t\tUploader = Plupload;\n\t\t}\n\t\telse {\n\t\t\tUploader = MediaModal;\n\t\t}\n\n\t\tthis.uploader = new Uploader( {\n\t\t\t// We provide regular DOM element for the button\n\t\t\tbrowse_button: this.getRegion( 'form' ).getEl( '.pods-file-add' ).get(),\n\t\t\tui_region    : this.getRegion( 'ui_region' ),\n\t\t\tfield_options: options\n\t\t} );\n\t\treturn this.uploader;\n\t}\n\n} );\n","/*global jQuery, _, Backbone, Mn */\nconst $ = jQuery;\nimport { FileUpload } from '../fields/file-upload/src/file-upload';\n\nconst app = {\n\tfields: {}\n};\nexport default app;\n\n// @todo: just here for testing the file upload queue, long term solution needed to expose things\nimport * as Queue from '../fields/file-upload/src/views/file-upload-queue';\napp.Queue = Queue;\n\n/**\n * This is the workhorse that currently kicks everything off\n */\njQuery( function ( $ ) {\n\t$( '.pods-form-ui-field' ).pods_ui_field_init();\n} );\n\n/**\n * Custom jQuery plugin to handle Pods Fields\n */\njQuery.fn.pods_ui_field_init = function () {\n\n\treturn this.each( function () {\n\t\tlet data = {}, field_id, field;\n\t\tlet defaults = {\n\t\t\tfield_type: 'hidden'\n\t\t};\n\n\t\t// Combine data from all in-line data scripts in the container\n\t\t$( this ).find( 'script.data' ).each( function () {\n\t\t\t\tvar this_data = $.parseJSON( $( this ).html() );\n\t\t\t\t$.extend( data, this_data );\n\t\t\t\t$( this ).remove();\n\t\t\t}\n\t\t);\n\n\t\t// Merge inline data with the defaults and startup the new control\n\t\tdata = $.extend( defaults, data );\n\t\tfield = field_factory( data.field_type );\n\n\t\tif ( field !== undefined ) {\n\t\t\tfield_id = data.field_meta[ 'field_attributes' ].id;\n\n\t\t\tapp.fields[ field_id ] = new field( {\n\t\t\t\tel        : this,\n\t\t\t\tfield_meta: data[ 'field_meta' ],\n\t\t\t\tmodel_data: data[ 'model_data' ]\n\t\t\t} );\n\t\t\tapp.fields[ field_id ].render();\n\t\t}\n\t} );\n};\n\n/**\n * @param {string} field_type\n */\nconst field_factory = function ( field_type ) {\n\tlet field_control;\n\n\tswitch ( field_type ) {\n\t\tcase 'file-upload':\n\t\t\tfield_control = FileUpload;\n\t\t\tbreak;\n\n\t\tcase 'pick':\n\t\t\t// field_control = Pick\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t//field_control = Hidden;\n\t\t\tbreak;\n\t}\n\n\treturn field_control;\n};"],"names":["FileUploadModel","Backbone","Model","extend","FileUploadCollection","Collection","models","field_meta","field_options","this","listenTo","onCollectionAdd","model","collection","options","truncateToFileLimit","file_limit","limit","first_model","length","at","trigger","$","jQuery","FileUploadItem","Mn","LayoutView","_","template","html","data","toJSON","attr","FileUploadList","CollectionView","childViewOptions","$el","sortable","FileUploadForm","attributes","PodsFileUploader","Object","browse_button","ui_region","call","FileUploadQueueModel","FileUploadQueueItem","get","render","FileUploadQueue","plupload_init","plupload","up","file","response","console","$$5","parseJSON","log","post_title","type","selection","sizes","icon","full","new_files","formView","MediaModal","Uploader","uploader","app","undefined","el"],"mappings":"2OAIO,IAAMA,GAAkBC,SAASC,MAAMC,qBAEpC,OACA,QACA,QACA,MAOGC,EAAuBH,SAASI,WAAWF,cAChDH,2BAIK,SAAWM,EAAQC,QACzBA,WAAaA,WACbA,WAAWC,cAAgBC,KAAKF,WAAWC,uBAG3CE,SAAUD,KAAM,MAAOA,KAAKE,kCAGjB,SAAWC,EAAOC,EAAYC,QACzCC,oBAAqBN,KAAKF,WAAWC,cAAcQ,iCAGpC,SAAWC,MAC3BC,EAEU,IAATD,GAAcR,KAAKU,OAASF,MAIlBR,KAAKW,GAAI,KACXC,QAAS,UAAWH,OCrC7BI,EAAIC,OACGC,EAAiBC,GAAGC,WAAWvB,gBAClC,eAEE,4BAGK,kCACA,oCACA,8BAGNwB,EAAEC,SAAUN,EAAG,8BAA+BO,4CAG5B,mCASb,cACVC,GAAOrB,KAAKG,MAAMmB,kBAEjBC,KAAOvB,KAAKK,QAAL,mBACPA,QAAUL,KAAKK,QAAL,cAERgB,KAQIG,EAAiBR,GAAGS,eAAe/B,gBACtC,eAEE,uCAEAqB,aAIC,SAAWV,QACjBqB,iBAAmBrB,EAAQP,qBAGvB,WAOJ,GAAKE,KAAKK,QAAL,WAAA,cAAA,iBAEJsB,IAAIC,sBACW,cACA,sBACA,aACA,kBACA,QCpEjBf,EAAIC,OAEGe,EAAiBb,GAAGC,WAAWvB,gBAElC,qBAGI,2BAGHwB,EAAEC,SAAUN,EAAG,8BAA+BO,yCAG/B,gCASV,cACVC,eAECS,WAAa9B,KAAKK,QAAQP,WAAb,mBACbO,QAAUL,KAAKK,QAAQP,WAAb,cAERuB,KCRIU,EAAmBf,GAAGgB,OAAOtC,oBAE5B,SAAWW,QAElB4B,cAAgB5B,EAAQ4B,mBACxBC,UAAY7B,EAAQ6B,eACpBnC,cAAgBM,EAAQN,iBAE1BiC,OAAOG,KAAMnC,KAAMK,MC5BlBQ,EAAIC,OAEGsB,EAAuB5C,SAASC,MAAMC,qBAEtC,WACA,YACA,YACA,MAOA2C,EAAsBrB,GAAGC,WAAWvB,cACzC0C,UAEE,cAEClB,EAAEC,SAAUN,EAAG,+BAAgCO,mBAE7C,0BAEH,eACApB,KAAKG,MAAMmC,IAAK,4BAKd,iCAGK,gBACVC,YAQMC,EAAkBxB,GAAGS,eAAe/B,gBACvC,eAEE,wCAEA2C,kJC7BLtC,cAAe0C,cAAcR,sCAE7BS,iEAXM1C,uNA4BE,oBACII,uCAIA,cANFD,wSA+CGwC,EAAbC,oGAOQC,4BADZC,2CAQYD,4CAKAE,4BADZD,2CASUD,qCAML,uBACQG,mIAOZC,uBAAAH,kJAgBDI,oDAKkBtC,mfCvHlBuC,8XA2BIC,8BAOCC,IAAAvB,gCAEsEwB,8FASzDC,2CAnBHC,+QC5BjB,oTAqBCC,qCAVSzD,+aA2DO0D,mBAGTC,oIChGHC,kCAgBLC,8EAUC/C,wFAKAgD,+FAQA9D,iFASc8D,gDANdD,mBApByCE,kFA0CxC"}